import React, { useState, useEffect } from 'react';
import { Folder, ClipboardList, Table, PlusCircle, Check, Clock, X } from 'lucide-react';

const RistoranteGestione = () => {
  const [menu, setMenu] = useState([
    { id: 1, nome: 'Pizza Margherita', prezzo: 8.50, categoria: 'Pizze' },
    { id: 2, nome: 'Pasta Carbonara', prezzo: 10.00, categoria: 'Primi' },
    { id: 3, nome: 'Insalata Mista', prezzo: 5.50, categoria: 'Contorni' }
  ]);

  const [tavoli, setTavoli] = useState([
    { id: 1, numero: 1, occupato: false, posti: 4 },
    { id: 2, numero: 2, occupato: true, posti: 2 },
    { id: 3, numero: 3, occupato: false, posti: 6 }
  ]);

  const [ordini, setOrdini] = useState([
    { 
      id: 1, 
      tavolo: 2, 
      piatti: ['Pizza Margherita', 'Insalata Mista'], 
      stato: 'In Preparazione',
      dataOrdine: new Date()
    }
  ]);

  const [modalOrdineAperto, setModalOrdineAperto] = useState(false);
  const [nuovoOrdine, setNuovoOrdine] = useState({
    tavolo: null,
    piatti: []
  });

  // Funzione per creare un nuovo ordine
  const creaOrdine = () => {
    if (!nuovoOrdine.tavolo || nuovoOrdine.piatti.length === 0) {
      alert('Selezionare tavolo e piatti');
      return;
    }

    const ordine = {
      id: ordini.length + 1,
      ...nuovoOrdine,
      stato: 'In Preparazione',
      dataOrdine: new Date()
    };

    // Aggiorna stato tavolo
    const nuoviTavoli = tavoli.map(t => 
      t.numero === nuovoOrdine.tavolo ? {...t, occupato: true} : t
    );

    setOrdini([...ordini, ordine]);
    setTavoli(nuoviTavoli);
    setModalOrdineAperto(false);
    setNuovoOrdine({ tavolo: null, piatti: [] });
  };

  // Aggiorna stato ordine
  const aggiornaStatoOrdine = (ordineId, nuovoStato) => {
    const nuoviOrdini = ordini.map(ordine => 
      ordine.id === ordineId ? {...ordine, stato: nuovoStato} : ordine
    );
    setOrdini(nuoviOrdini);
  };

  return (
    <div className="p-4 bg-gray-100 min-h-screen">
      <h1 className="text-3xl font-bold mb-6 text-center">Gestione Ordini Ristorante</h1>
      
      <div className="grid md:grid-cols-3 gap-4">
        {/* Sezione Menu */}
        <div className="bg-white shadow-md rounded-lg p-4">
          <div className="flex items-center mb-4">
            <Folder className="mr-2" />
            <h2 className="text-xl font-semibold">Menu</h2>
          </div>
          {menu.map(item => (
            <div key={item.id} className="flex justify-between p-2 border-b">
              <span>{item.nome}</span>
              <span className="font-bold">€{item.prezzo.toFixed(2)}</span>
            </div>
          ))}
        </div>

        {/* Sezione Tavoli */}
        <div className="bg-white shadow-md rounded-lg p-4">
          <div className="flex items-center mb-4">
            <Table className="mr-2" />
            <h2 className="text-xl font-semibold">Tavoli</h2>
          </div>
          {tavoli.map(tavolo => (
            <div 
              key={tavolo.id} 
              className={`p-2 mb-2 rounded ${tavolo.occupato ? 'bg-red-100' : 'bg-green-100'}`}
            >
              <div className="flex justify-between">
                <span>Tavolo {tavolo.numero}</span>
                <span>{tavolo.occupato ? 'Occupato' : 'Libero'}</span>
              </div>
              <div className="text-sm text-gray-600">Posti: {tavolo.posti}</div>
            </div>
          ))}
        </div>

        {/* Sezione Ordini */}
        <div className="bg-white shadow-md rounded-lg p-4">
          <div className="flex items-center mb-4">
            <ClipboardList className="mr-2" />
            <h2 className="text-xl font-semibold">Ordini Attivi</h2>
          </div>
          {ordini.map(ordine => (
            <div key={ordine.id} className="p-2 mb-2 border rounded">
              <div className="flex justify-between mb-2">
                <span>Tavolo {ordine.tavolo}</span>
                <span className={`
                  px-2 py-1 rounded text-xs
                  ${ordine.stato === 'In Preparazione' ? 'bg-yellow-100 text-yellow-800' : 
                    ordine.stato === 'Pronto' ? 'bg-green-100 text-green-800' : 
                    'bg-blue-100 text-blue-800'}
                `}>
                  {ordine.stato}
                </span>
              </div>
              <div className="text-sm mb-2">
                {ordine.piatti.join(', ')}
              </div>
              <div className="flex space-x-2">
                {ordine.stato === 'In Preparazione' && (
                  <button 
                    onClick={() => aggiornaStatoOrdine(ordine.id, 'Pronto')}
                    className="bg-green-500 text-white p-1 rounded flex items-center"
                  >
                    <Check className="mr-1" size={16} /> Pronto
                  </button>
                )}
                {ordine.stato === 'Pronto' && (
                  <button 
                    onClick={() => aggiornaStatoOrdine(ordine.id, 'Servito')}
                    className="bg-blue-500 text-white p-1 rounded flex items-center"
                  >
                    <Clock className="mr-1" size={16} /> Servito
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Bottone Nuovo Ordine */}
      <div className="fixed bottom-4 right-4">
        <button 
          onClick={() => setModalOrdineAperto(true)}
          className="bg-blue-500 text-white p-3 rounded-full shadow-lg hover:bg-blue-600 flex items-center"
        >
          <PlusCircle className="mr-2" /> Nuovo Ordine
        </button>
      </div>

      {/* Modal Nuovo Ordine */}
      {modalOrdineAperto && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white p-6 rounded-lg w-96">
            <h2 className="text-2xl mb-4">Nuovo Ordine</h2>
            
            {/* Selezione Tavolo */}
            <div className="mb-4">
              <label className="block mb-2">Seleziona Tavolo</label>
              <div className="grid grid-cols-3 gap-2">
                {tavoli.filter(t => !t.occupato).map(tavolo => (
                  <button
                    key={tavolo.id}
                    onClick={() => setNuovoOrdine({...nuovoOrdine, tavolo: tavolo.numero})}
                    className={`p-2 rounded ${nuovoOrdine.tavolo === tavolo.numero ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                  >
                    Tavolo {tavolo.numero}
                  </button>
                ))}
              </div>
            </div>

            {/* Selezione Piatti */}
            <div className="mb-4">
              <label className="block mb-2">Seleziona Piatti</label>
              {menu.map(piatto => (
                <div key={piatto.id} className="flex items-center mb-2">
                  <input 
                    type="checkbox" 
                    id={`piatto-${piatto.id}`}
                    checked={nuovoOrdine.piatti.includes(piatto.nome)}
                    onChange={() => {
                      const piatti = nuovoOrdine.piatti.includes(piatto.nome)
                        ? nuovoOrdine.piatti.filter(p => p !== piatto.nome)
                        : [...nuovoOrdine.piatti, piatto.nome];
                      setNuovoOrdine({...nuovoOrdine, piatti});
                    }}
                    className="mr-2"
                  />
                  <label htmlFor={`piatto-${piatto.id}`}>
                    {piatto.nome} - €{piatto.prezzo.toFixed(2)}
                  </label>
                </div>
              ))}
            </div>

            {/* Bottoni Modal */}
            <div className="flex justify-between">
              <button 
                onClick={() => setModalOrdineAperto(false)}
                className="bg-gray-200 p-2 rounded mr-2 flex items-center"
              >
                <X className="mr-1" /> Annulla
              </button>
              <button 
                onClick={creaOrdine}
                className="bg-blue-500 text-white p-2 rounded flex items-center"
              >
                <Check className="mr-1" /> Conferma Ordine
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RistoranteGestione;
